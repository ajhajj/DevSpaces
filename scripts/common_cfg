
BASTION=false
BASTION_ID=lab-user
BASTION_SERVER=bastion.4ndpj.sandbox48.opentlc.com

# ==================================================================
#                OpenShift API Server Config
# ==================================================================

# Local CodeReadyContainers connection details
API_SERVER=api.crc.testing:6443

# Cloud instance connection details
#API_SERVER=api.crc.testing:6443

# toggle TLS verify for self-signed certs
SKIP_TLS_VERIFY=false

if [ "${BASTION}" == "true" ];then
  API_URL=https://localhost:6443
  SKIP_TLS_VERIFY=true

  curl -k ${API_URL} > /dev/null 2>&1
  if [ "$?" != "0" ];then
    echo "Tunnel service to bastion server is not running!"
  fi
else
  API_URL=https://${API_SERVER}
fi

# ==================================================================
#                OpenShift Credential Config
# ==================================================================

# Cloud Server Auth Tokens
TOKEN_ADMIN=sha256~63slZthCU-CE6r0WFVDVUgvx34Her6EJivJ1qK1kHF8
TOKEN_DEV=sha256~Z0ZKqtwY0598DNlSrKqj7VnfF01K4D-ZBaBPzz7dc1Y

# Credentials
KUBEADMIN_USER=kubeadmin
KUBEADMIN_PASS=redhat!
ADMIN_USER=ocadmin
ADMIN_PASS=redhat!
DEV_USER=developer
DEV_PASS=developer

# ==================================================================
#                quay.io credentials
# ==================================================================
QUAY_USER=<QUAY USER ID>
QUAY_TOKEN=<TOKEN GENERATED BY QUAY>


# ==================================================================


# ==================================================================
#                Convenience methods
# ==================================================================

# checking if oc command is installed/resolvable
# if oc binary is not resolvable check to see if CRC is installed
# if so use CRC provided oc binary
command -v oc > /dev/null 2>&1
if [ "$?" == "1" ];then
  #checking if CodeReadyContainers is installed/resolvable
  command -v crc > /dev/null 2>&1
  if [ "$?" == "0" ];then
    eval $(crc oc-env)
  else
    echo "Cannot find oc command.  Exiting.."
    exit 1;
  fi
fi


# Test to see if a project currently exists
isProject()
  {
    oc get "project/${1}" > /dev/null 2>&1
    if [ "$?" == "0" ];then
      # 0 = true
      return 0
    else
      # 1 = false
      return 1
    fi
  }

# Error check
failChk()
  {
    COMMAND=$@
   # $(${COMMAND}) 
    eval "${COMMAND}"
    if [ $? -gt 0 ]; then
        printf "\n\n     ==============================================================\n"
        printf "       Error executing: '${COMMAND}'\n"
        printf "     ==============================================================\n"
        exit 1;
    fi
  }

# generate oc login parameter string
# expects user as parameter 
getLoginString()
  {
    AUTH_STRING=""

    if [ "${1}" == "${KUBEADMIN_USER}" ];then
      AUTH_STRING='-u '"${KUBEADMIN_USER}"' -p '"${KUBEADMIN_PASS}"' '"${API_URL}"
    elif [ "${1}" == "${ADMIN_USER}" ];then
      AUTH_STRING='-u '"${ADMIN_USER}"' -p '"${KUBEADMIN_PASS}"' '"${API_URL}"
    elif [ "${1}" == "${DEV_USER}" ];then
      AUTH_STRING='-u '"${DEV_USER}"' -p '"${DEV_PASS}"' '"${API_URL}"
    elif [ "${1}" == "adminToken" ];then
      AUTH_STRING='--token='"${TOKEN_ADMIN}"' --server='"${API_URL}"
    elif [ "${1}" == "token" ];then
      AUTH_STRING='--token='"${TOKEN_DEV}"' --server='"${API_URL}"
    fi
    if [ "${SKIP_TLS_VERIFY}" == "true" ];then
      AUTH_STRING='--insecure-skip-tls-verify=true '"${AUTH_STRING}"
    fi

    echo "${AUTH_STRING}"
  }

# ==================================================================

